{"version":3,"sources":["Today/CryptoPrice.js","Today/Today.js","History/SectionBox.js","History/History.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["CryptoPrice","currency","price","className","toUpperCase","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","restoreStateFromLocalStorage","parse","getItem","setState","data","axios","post","prices","then","console","log","catch","error","navigator","onLine","this","pusher","Pusher","cluster","encrypted","subscribe","get","BTC","ETH","LTC","USD","cryptoSubscription","setInterval","sendPricePusher","bind","clearInterval","Component","SectionBox","date","btc","eth","ltc","defaultProps","History","getPriceForDay","daysCount","key","time","moment","subtract","unix","all","getETHPrices","getBTCPrices","getLTCPrices","spread","f","format","getCurrencyPrice","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","days","day","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72313f26.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CryptoPrice = ({currency, price}) =>\n\t<div className={`column ${currency}--section`}>\n\t\t<h5>${price}</h5>\n\t\t<p>1 {currency.toUpperCase()}</p>\n\t</div>;\n\nCryptoPrice.propTypes = {\n\tprice: PropTypes.number.isRequired,\n\tcurrency: PropTypes.string.isRequired,\n};","import React, { Component } from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\nimport { CryptoPrice } from \"./CryptoPrice\";\n\nclass Today extends Component {\n\t/**\n\t * If you're not using the props to initialize your state, you can\n\t * just define the state like this and remove the constructor\n\t */\n\tstate = {\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\n\t\tltcprice: 0,\n\t\tethprice: 0\n\t};\n\n\tsendPricePusher(data) {\n\t\taxios.post('/prices/new', {\n\t\t\tprices: data\n\t\t})\n\t\t\t.then(console.log)\n\t\t\t.catch(console.error) // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\n\t}\n\n\t/**\n\t * ComponentWillMount is deprecated and should never be used\n\t * The only exception is:\n\t * When doing Server Side Rendering, this is the only lifecycle method called\n\t *\n\t * Source: https://facebook.github.io/react/docs/react-component.html\n\t */\n\tcomponentWillMount() { }\n\n\t/**\n\t * Let's create utilitary functions to keep our code D.R.Y.\n\t * Btw, in our use case it's perfectly fine to save the entire state here\n\t */\n\tsaveStateToLocalStorage = () => {\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\n\t};\n\n\trestoreStateFromLocalStorage = () => {\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\n\t\tthis.setState(state);\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!navigator.onLine) {\n\t\t\treturn this.restoreStateFromLocalStorage();\n\t\t}\n\t\tthis.pusher = new Pusher('APP_KEY', {\n\t\t\tcluster: 'YOUR_CLUSTER',\n\t\t\tencrypted: true\n\t\t});\n\t\tthis.prices = this.pusher.subscribe('coin-prices');\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\n\t\t\t\t/**\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\n\t\t\t\t * handle the batching\n\t\t\t\t */\n\t\t\t\tthis.setState({\n\t\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\t\tethprice: ETH.USD,\n\t\t\t\t\tltcprice: LTC.USD\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\n\n\t\t\t})\n\t\t\t.catch(console.error);\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\n\t\tthis.cryptoSubscription = setInterval(() => {\n\t\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\n\t\t\t\t\tthis.sendPricePusher(data)\n\t\t\t\t})\n\t\t\t\t.catch(console.error)\n\t\t}, 10000);\n\t\tthis.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\n\t\t\tthis.setState({\n\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\tethprice: ETH.USD,\n\t\t\t\tltcprice: LTC.USD\n\t\t\t}, this.saveStateToLocalStorage);\n\t\t}, this);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.cryptoSubscription);\n\t}\n\n\trender() {\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\n\t\treturn (\n\t\t\t<div className=\"today--section container\">\n\t\t\t\t<h2>Current Price</h2>\n\t\t\t\t<div className=\"columns today--section__box\">\n\t\t\t\t\t{/** Creating components for things that repeat themselves is also pretty good**/}\n\t\t\t\t\t<CryptoPrice currency=\"btc\" price={btcprice} />\n\t\t\t\t\t<CryptoPrice currency=\"eth\" price={ethprice} />\n\t\t\t\t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Today;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SectionBox = ({price}) =>\n\t<div className=\"history--section__box__inner\">\n\t\t<h4>{price.date}</h4>\n\t\t<div className=\"columns\">\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 BTC = ${price.btc}</p>\n\t\t\t</div>\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 ETH = ${price.eth}</p>\n\t\t\t</div>\n\t\t\t<div className=\"column\">\n\t\t\t\t<p>1 LTC = ${price.ltc}</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>;\n\nSectionBox.propTypes = {\n\tprice: PropTypes.object.isRequired\n};\n\nSectionBox.defaultProps = {\n\tprice: {\n\t\tdate: '',\n\t\tbtc: 0,\n\t\teth: 0,\n\t\tltc: 0\n\t}\n};","import React, { Component } from 'react';\nimport './History.css'\nimport axios from 'axios'\nimport moment from 'moment'\nimport {SectionBox} from \"./SectionBox\";\n\nclass History extends Component {\n    constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        };\n        /** Let's use arrow functions instead of using bind\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n         **/\n    }\n\n\t/**\n     * Let's create utilitary functions to keep our code D.R.Y.\n\t */\n\n\tsaveStateToLocalStorage = () => {\n\t\tlocalStorage.setItem('history-state', JSON.stringify(this.state));\n\t};\n\n\trestoreStateFromLocalStorage = () => {\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\n\t\tconsole.log(state);\n\t\tthis.setState(state);\n\t};\n\n\tgetPriceForDay = (daysCount = 0, key) => {\n\t\tconst time = moment().subtract(daysCount, 'days').unix();\n\t\taxios.all([this.getETHPrices(time), this.getBTCPrices(time), this.getLTCPrices(time)])\n\t\t\t.then(axios.spread((eth, btc, ltc) => {\n\t\t\t    /** Have clear names for your variables, what is f supposed to be? **/\n\t\t\t\tlet f = {\n\t\t\t\t\tdate: moment.unix(time).format(\"MMMM Do YYYY\"),\n\t\t\t\t\teth: eth.data.ETH.USD,\n\t\t\t\t\tbtc: btc.data.BTC.USD,\n\t\t\t\t\tltc: ltc.data.LTC.USD\n\t\t\t\t};\n\t\t\t\tthis.setState({\n                    [key]: f\n                }, this.saveStateToLocalStorage);\n\t\t\t}));\n\t};\n\n\tgetCurrencyPrice = (date, currency) =>\n        axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${currency}&tsyms=USD&ts=${date}`);\n\n\tgetETHPrices = (date) => this.getCurrencyPrice(date, 'ETH');\n    getBTCPrices = (date) => this.getCurrencyPrice(date, 'BTC');\n    getLTCPrices = (date) => this.getCurrencyPrice(date, 'LTC');\n\n    /**\n     * Now we can define all those functions like this ! :-)\n     * Or ... we can do it programmaticaly like below\n    getTodayPrice = () => this.getPriceForDay(0, 'todayprice');\n    getYesterdayPrice = () => this.getPriceForDay(1, 'yesterdayprice');\n    getTwoDaysPrice = () => this.getPriceForDay(2, 'twodaysprice');\n    getThreeDaysPrice = () => this.getPriceForDay(3, 'threedaysprice');\n    getFourDaysPrice = () => this.getFourDaysPrice(4, 'fourdaysprice');**/\n\n    componentDidMount () {\n\t\tif (!navigator.onLine) {\n\t\t    this.restoreStateFromLocalStorage();\n\t\t}\n        const days = ['today', 'yesterday', 'twodays', 'threedays', 'fourdays'];\n        for(const day in days){\n            this.getPriceForDay(day, `${days[day]}price`);\n        }\n        /** We can simplify it but.. Thats just a style thing aswell\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();**/\n    }\n    render() {\n\t\t/**\n\t\t * By creating components and extracting the variable at the top here, we created a much cleaner\n\t\t * version of it ! :-)\n\t\t */\n\t\tconst {todayprice, yesterdayprice, twodaysprice, threedaysprice, fourdaysprice} = this.state;\n\t\tconsole.log(this.state);\n    \treturn (\n            <div className=\"history--section container\">\n                <h2>History (Past 5 days)</h2>\n                <div className=\"history--section__box\">\n\t\t\t\t\t<SectionBox price={todayprice}/>\n\t\t\t\t\t<SectionBox price={yesterdayprice}/>\n\t\t\t\t\t<SectionBox price={twodaysprice}/>\n\t\t\t\t\t<SectionBox price={threedaysprice}/>\n\t\t\t\t\t<SectionBox price={fourdaysprice}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default History;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Today from './Today/Today';\nimport History from './History/History';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"\">\n        <div className=\"topheader\">\n          <header className=\"container\">\n            <nav className=\"navbar\">\n              <div className=\"navbar-brand\">\n                <span className=\"navbar-item\">PusherCoins</span>\n              </div>\n\n              <div className=\"navbar-end\">\n                <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n              </div>\n            </nav>\n          </header>\n        </div>\n      \n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>PusherCoins is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n          </div>\n          <div className=\"results--section__inner\">\n            <Today />\n            <History />\n          </div>\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}