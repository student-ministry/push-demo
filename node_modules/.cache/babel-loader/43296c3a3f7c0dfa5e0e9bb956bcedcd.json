{"ast":null,"code":"var _jsxFileName = \"/home/youpeng.huang/test/react-native/my-app/src/Today/Today.js\";\nimport React, { Component } from 'react';\nimport './Today.css';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport { CryptoPrice } from \"./CryptoPrice\";\n\nclass Today extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      btcprice: 0,\n      // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\n      ltcprice: 0,\n      ethprice: 0\n    };\n\n    this.saveStateToLocalStorage = () => {\n      localStorage.setItem('today-state', JSON.stringify(this.state));\n    };\n\n    this.restoreStateFromLocalStorage = () => {\n      const state = JSON.parse(localStorage.getItem('today-state'));\n      this.setState(state);\n    };\n  }\n\n  sendPricePusher(data) {\n    axios.post('/prices/new', {\n      prices: data\n    }).then(console.log).catch(console.error); // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\n  }\n  /**\n   * ComponentWillMount is deprecated and should never be used\n   * The only exception is:\n   * When doing Server Side Rendering, this is the only lifecycle method called\n   *\n   * Source: https://facebook.github.io/react/docs/react-component.html\n   */\n\n\n  componentWillMount() {}\n  /**\n   * Let's create utilitary functions to keep our code D.R.Y.\n   * Btw, in our use case it's perfectly fine to save the entire state here\n   */\n\n\n  componentDidMount() {\n    if (!navigator.onLine) {\n      return this.restoreStateFromLocalStorage();\n    }\n\n    this.pusher = new Pusher('APP_KEY', {\n      cluster: 'YOUR_CLUSTER',\n      encrypted: true\n    });\n    this.prices = this.pusher.subscribe('coin-prices');\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(({\n      data: {\n        BTC,\n        ETH,\n        LTC\n      }\n    }) => {\n      // Since we're never using responseh or data directly might aswell deconstruct it here\n\n      /**\n       * Avoid calling setStates multiple times, just do every calls in one go and let react\n       * handle the batching\n       */\n      this.setState({\n        btcprice: BTC.USD,\n        ethprice: ETH.USD,\n        ltcprice: LTC.USD\n      }, this.saveStateToLocalStorage); // You can pass a callback function to setState\n    }).catch(console.error); // Let's store this interval in our class so that we can remove it in componentWillUnmount\n\n    this.cryptoSubscription = setInterval(() => {\n      axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(({\n        data\n      }) => {\n        // This is a style question, I prefed doing it this way, to each its own\n        this.sendPricePusher(data);\n      }).catch(console.error);\n    }, 10000);\n    this.prices.bind('prices', ({\n      prices: {\n        BTC,\n        ETH,\n        LTC\n      }\n    }) => {\n      this.setState({\n        btcprice: BTC.USD,\n        ethprice: ETH.USD,\n        ltcprice: LTC.USD\n      }, this.saveStateToLocalStorage);\n    }, this);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.cryptoSubscription);\n  }\n\n  render() {\n    // Let's extract everything uptop to keep our render method cleaner ;)\n    const {\n      ethprice,\n      btcprice,\n      ltcprice\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"today--section container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Current Price\"), React.createElement(\"div\", {\n      className: \"columns today--section__box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(CryptoPrice, {\n      currency: \"btc\",\n      price: btcprice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(CryptoPrice, {\n      currency: \"eth\",\n      price: ethprice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(CryptoPrice, {\n      currency: \"ltc\",\n      price: ltcprice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Today;","map":{"version":3,"sources":["/home/youpeng.huang/test/react-native/my-app/src/Today/Today.js"],"names":["React","Component","axios","Pusher","CryptoPrice","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","restoreStateFromLocalStorage","parse","getItem","setState","sendPricePusher","data","post","prices","then","console","log","catch","error","componentWillMount","componentDidMount","navigator","onLine","pusher","cluster","encrypted","subscribe","get","BTC","ETH","LTC","USD","cryptoSubscription","setInterval","bind","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\nimport { CryptoPrice } from \"./CryptoPrice\";\n\nclass Today extends Component {\n\t/**\n\t * If you're not using the props to initialize your state, you can\n\t * just define the state like this and remove the constructor\n\t */\n\tstate = {\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\n\t\tltcprice: 0,\n\t\tethprice: 0\n\t};\n\n\tsendPricePusher(data) {\n\t\taxios.post('/prices/new', {\n\t\t\tprices: data\n\t\t})\n\t\t\t.then(console.log)\n\t\t\t.catch(console.error) // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\n\t}\n\n\t/**\n\t * ComponentWillMount is deprecated and should never be used\n\t * The only exception is:\n\t * When doing Server Side Rendering, this is the only lifecycle method called\n\t *\n\t * Source: https://facebook.github.io/react/docs/react-component.html\n\t */\n\tcomponentWillMount() { }\n\n\t/**\n\t * Let's create utilitary functions to keep our code D.R.Y.\n\t * Btw, in our use case it's perfectly fine to save the entire state here\n\t */\n\tsaveStateToLocalStorage = () => {\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\n\t};\n\n\trestoreStateFromLocalStorage = () => {\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\n\t\tthis.setState(state);\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!navigator.onLine) {\n\t\t\treturn this.restoreStateFromLocalStorage();\n\t\t}\n\t\tthis.pusher = new Pusher('APP_KEY', {\n\t\t\tcluster: 'YOUR_CLUSTER',\n\t\t\tencrypted: true\n\t\t});\n\t\tthis.prices = this.pusher.subscribe('coin-prices');\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\n\t\t\t\t/**\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\n\t\t\t\t * handle the batching\n\t\t\t\t */\n\t\t\t\tthis.setState({\n\t\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\t\tethprice: ETH.USD,\n\t\t\t\t\tltcprice: LTC.USD\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\n\n\t\t\t})\n\t\t\t.catch(console.error);\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\n\t\tthis.cryptoSubscription = setInterval(() => {\n\t\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\n\t\t\t\t\tthis.sendPricePusher(data)\n\t\t\t\t})\n\t\t\t\t.catch(console.error)\n\t\t}, 10000);\n\t\tthis.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\n\t\t\tthis.setState({\n\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\tethprice: ETH.USD,\n\t\t\t\tltcprice: LTC.USD\n\t\t\t}, this.saveStateToLocalStorage);\n\t\t}, this);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.cryptoSubscription);\n\t}\n\n\trender() {\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\n\t\treturn (\n\t\t\t<div className=\"today--section container\">\n\t\t\t\t<h2>Current Price</h2>\n\t\t\t\t<div className=\"columns today--section__box\">\n\t\t\t\t\t{/** Creating components for things that repeat themselves is also pretty good**/}\n\t\t\t\t\t<CryptoPrice currency=\"btc\" price={btcprice} />\n\t\t\t\t\t<CryptoPrice currency=\"eth\" price={ethprice} />\n\t\t\t\t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Today;"]},"metadata":{},"sourceType":"module"}