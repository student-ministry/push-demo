{"ast":null,"code":"import _classCallCheck from\"/home/youpeng.huang/test/react-native/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/youpeng.huang/test/react-native/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/youpeng.huang/test/react-native/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/youpeng.huang/test/react-native/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/youpeng.huang/test/react-native/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import'./Today.css';import axios from'axios';import Pusher from'pusher-js';import{CryptoPrice}from\"./CryptoPrice\";var Today=/*#__PURE__*/function(_Component){_inherits(Today,_Component);function Today(){var _getPrototypeOf2;var _this;_classCallCheck(this,Today);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Today)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={btcprice:0,// I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\nltcprice:0,ethprice:0};_this.saveStateToLocalStorage=function(){localStorage.setItem('today-state',JSON.stringify(_this.state));};_this.restoreStateFromLocalStorage=function(){var state=JSON.parse(localStorage.getItem('today-state'));_this.setState(state);};return _this;}_createClass(Today,[{key:\"sendPricePusher\",value:function sendPricePusher(data){axios.post('/prices/new',{prices:data}).then(console.log).catch(console.error);// if you do (x => yourFunc(x)) you can replace it with (yourFunc)\n}/**\n\t * ComponentWillMount is deprecated and should never be used\n\t * The only exception is:\n\t * When doing Server Side Rendering, this is the only lifecycle method called\n\t *\n\t * Source: https://facebook.github.io/react/docs/react-component.html\n\t */},{key:\"componentWillMount\",value:function componentWillMount(){}/**\n\t * Let's create utilitary functions to keep our code D.R.Y.\n\t * Btw, in our use case it's perfectly fine to save the entire state here\n\t */},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(!navigator.onLine){return this.restoreStateFromLocalStorage();}this.pusher=new Pusher('APP_KEY',{cluster:'YOUR_CLUSTER',encrypted:true});this.prices=this.pusher.subscribe('coin-prices');axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(function(_ref){var _ref$data=_ref.data,BTC=_ref$data.BTC,ETH=_ref$data.ETH,LTC=_ref$data.LTC;// Since we're never using responseh or data directly might aswell deconstruct it here\n/**\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\n\t\t\t\t * handle the batching\n\t\t\t\t */_this2.setState({btcprice:BTC.USD,ethprice:ETH.USD,ltcprice:LTC.USD},_this2.saveStateToLocalStorage);// You can pass a callback function to setState\n}).catch(console.error);// Let's store this interval in our class so that we can remove it in componentWillUnmount\nthis.cryptoSubscription=setInterval(function(){axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(function(_ref2){var data=_ref2.data;// This is a style question, I prefed doing it this way, to each its own\n_this2.sendPricePusher(data);}).catch(console.error);},10000);this.prices.bind('prices',function(_ref3){var _ref3$prices=_ref3.prices,BTC=_ref3$prices.BTC,ETH=_ref3$prices.ETH,LTC=_ref3$prices.LTC;_this2.setState({btcprice:BTC.USD,ethprice:ETH.USD,ltcprice:LTC.USD},_this2.saveStateToLocalStorage);},this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.cryptoSubscription);}},{key:\"render\",value:function render(){// Let's extract everything uptop to keep our render method cleaner ;)\nvar _this$state=this.state,ethprice=_this$state.ethprice,btcprice=_this$state.btcprice,ltcprice=_this$state.ltcprice;return React.createElement(\"div\",{className:\"today--section container\"},React.createElement(\"h2\",null,\"Current Price\"),React.createElement(\"div\",{className:\"columns today--section__box\"},React.createElement(CryptoPrice,{currency:\"btc\",price:btcprice}),React.createElement(CryptoPrice,{currency:\"eth\",price:ethprice}),React.createElement(CryptoPrice,{currency:\"ltc\",price:ltcprice})));}}]);return Today;}(Component);export default Today;","map":{"version":3,"sources":["/home/youpeng.huang/test/react-native/my-app/src/Today/Today.js"],"names":["React","Component","axios","Pusher","CryptoPrice","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","restoreStateFromLocalStorage","parse","getItem","setState","data","post","prices","then","console","log","catch","error","navigator","onLine","pusher","cluster","encrypted","subscribe","get","BTC","ETH","LTC","USD","cryptoSubscription","setInterval","sendPricePusher","bind","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\nimport { CryptoPrice } from \"./CryptoPrice\";\n\nclass Today extends Component {\n\t/**\n\t * If you're not using the props to initialize your state, you can\n\t * just define the state like this and remove the constructor\n\t */\n\tstate = {\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\n\t\tltcprice: 0,\n\t\tethprice: 0\n\t};\n\n\tsendPricePusher(data) {\n\t\taxios.post('/prices/new', {\n\t\t\tprices: data\n\t\t})\n\t\t\t.then(console.log)\n\t\t\t.catch(console.error) // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\n\t}\n\n\t/**\n\t * ComponentWillMount is deprecated and should never be used\n\t * The only exception is:\n\t * When doing Server Side Rendering, this is the only lifecycle method called\n\t *\n\t * Source: https://facebook.github.io/react/docs/react-component.html\n\t */\n\tcomponentWillMount() { }\n\n\t/**\n\t * Let's create utilitary functions to keep our code D.R.Y.\n\t * Btw, in our use case it's perfectly fine to save the entire state here\n\t */\n\tsaveStateToLocalStorage = () => {\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\n\t};\n\n\trestoreStateFromLocalStorage = () => {\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\n\t\tthis.setState(state);\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!navigator.onLine) {\n\t\t\treturn this.restoreStateFromLocalStorage();\n\t\t}\n\t\tthis.pusher = new Pusher('APP_KEY', {\n\t\t\tcluster: 'YOUR_CLUSTER',\n\t\t\tencrypted: true\n\t\t});\n\t\tthis.prices = this.pusher.subscribe('coin-prices');\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\n\t\t\t\t/**\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\n\t\t\t\t * handle the batching\n\t\t\t\t */\n\t\t\t\tthis.setState({\n\t\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\t\tethprice: ETH.USD,\n\t\t\t\t\tltcprice: LTC.USD\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\n\n\t\t\t})\n\t\t\t.catch(console.error);\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\n\t\tthis.cryptoSubscription = setInterval(() => {\n\t\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t\t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\n\t\t\t\t\tthis.sendPricePusher(data)\n\t\t\t\t})\n\t\t\t\t.catch(console.error)\n\t\t}, 10000);\n\t\tthis.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\n\t\t\tthis.setState({\n\t\t\t\tbtcprice: BTC.USD,\n\t\t\t\tethprice: ETH.USD,\n\t\t\t\tltcprice: LTC.USD\n\t\t\t}, this.saveStateToLocalStorage);\n\t\t}, this);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.cryptoSubscription);\n\t}\n\n\trender() {\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\n\t\treturn (\n\t\t\t<div className=\"today--section container\">\n\t\t\t\t<h2>Current Price</h2>\n\t\t\t\t<div className=\"columns today--section__box\">\n\t\t\t\t\t{/** Creating components for things that repeat themselves is also pretty good**/}\n\t\t\t\t\t<CryptoPrice currency=\"btc\" price={btcprice} />\n\t\t\t\t\t<CryptoPrice currency=\"eth\" price={ethprice} />\n\t\t\t\t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Today;"]},"metadata":{},"sourceType":"module"}